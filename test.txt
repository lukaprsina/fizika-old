[H[2J[3J[2m2022-07-28T09:03:18.020593Z[0m [32m INFO[0m [2mmath_eval[0m[2m:[0m Started the logger crate
Context:
df73d3e9-3cc9-4ace-8683-61cc746fce93: 1 + 2
Is number?: false
ExpressionInfo {
    variables: {},
    functions: {},
}


6eff5723-aee5-4c40-911a-6cd8b126f01f: 1 + 2
Is number?: false
ExpressionInfo {
    variables: {},
    functions: {},
}


Element { sign: Positive, node_or_expression: Expression(Expression { products: [Product { numerator: [Element { sign: Positive, node_or_expression: Node(Number(Int(1))), is_number: true }], denominator: [] }, Product { numerator: [Element { sign: Positive, node_or_expression: Node(Number(Int(2))), is_number: true }], denominator: [] }] }), is_number: false }
Element { sign: Positive, node_or_expression: Expression(Expression { products: [Product { numerator: [Element { sign: Positive, node_or_expression: Node(Number(Int(1))), is_number: true }], denominator: [] }, Product { numerator: [Element { sign: Positive, node_or_expression: Node(Number(Int(2))), is_number: true }], denominator: [] }] }), is_number: false }


Expression(Expression { products: [Product { numerator: [Element { sign: Positive, node_or_expression: Node(Number(Int(1))), is_number: true }], denominator: [] }, Product { numerator: [Element { sign: Positive, node_or_expression: Node(Number(Int(2))), is_number: true }], denominator: [] }] })
Expression(Expression { products: [Product { numerator: [Element { sign: Positive, node_or_expression: Node(Number(Int(1))), is_number: true }], denominator: [] }, Product { numerator: [Element { sign: Positive, node_or_expression: Node(Number(Int(2))), is_number: true }], denominator: [] }] })


Expression { products: [Product { numerator: [Element { sign: Positive, node_or_expression: Node(Number(Int(1))), is_number: true }], denominator: [] }, Product { numerator: [Element { sign: Positive, node_or_expression: Node(Number(Int(2))), is_number: true }], denominator: [] }] }
Expression { products: [Product { numerator: [Element { sign: Positive, node_or_expression: Node(Number(Int(1))), is_number: true }], denominator: [] }, Product { numerator: [Element { sign: Positive, node_or_expression: Node(Number(Int(2))), is_number: true }], denominator: [] }] }


Product { numerator: [Element { sign: Positive, node_or_expression: Node(Number(Int(1))), is_number: true }], denominator: [] }
Product { numerator: [Element { sign: Positive, node_or_expression: Node(Number(Int(1))), is_number: true }], denominator: [] }


Element { sign: Positive, node_or_expression: Node(Number(Int(1))), is_number: true }
Element { sign: Positive, node_or_expression: Node(Number(Int(1))), is_number: true }


Node(Number(Int(1)))
Node(Number(Int(1)))


Number(Int(1))
Number(Int(1))


Match
Match
Product { numerator: [Element { sign: Positive, node_or_expression: Node(Number(Int(1))), is_number: true }], denominator: [] }
Product { numerator: [Element { sign: Positive, node_or_expression: Node(Number(Int(2))), is_number: true }], denominator: [] }


Element { sign: Positive, node_or_expression: Node(Number(Int(1))), is_number: true }
Element { sign: Positive, node_or_expression: Node(Number(Int(2))), is_number: true }


Node(Number(Int(1)))
Node(Number(Int(2)))


Number(Int(1))
Number(Int(2))


Match
Product { numerator: [Element { sign: Positive, node_or_expression: Node(Number(Int(2))), is_number: true }], denominator: [] }
Product { numerator: [Element { sign: Positive, node_or_expression: Node(Number(Int(1))), is_number: true }], denominator: [] }


Element { sign: Positive, node_or_expression: Node(Number(Int(2))), is_number: true }
Element { sign: Positive, node_or_expression: Node(Number(Int(1))), is_number: true }


Node(Number(Int(2)))
Node(Number(Int(1)))


Number(Int(2))
Number(Int(1))


Match
Product { numerator: [Element { sign: Positive, node_or_expression: Node(Number(Int(2))), is_number: true }], denominator: [] }
Product { numerator: [Element { sign: Positive, node_or_expression: Node(Number(Int(2))), is_number: true }], denominator: [] }


Element { sign: Positive, node_or_expression: Node(Number(Int(2))), is_number: true }
Element { sign: Positive, node_or_expression: Node(Number(Int(2))), is_number: true }


Node(Number(Int(2)))
Node(Number(Int(2)))


Number(Int(2))
Number(Int(2))


Match
Match
Match
false
