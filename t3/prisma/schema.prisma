// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  topics        Topic[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Course {
  id     Int     @id @default(autoincrement())
  title  String
  topics Topic[]

  metadata   Metadata @relation(fields: [metadataId], references: [id])
  metadataId Int      @unique

  resource   Resource @relation(fields: [resourceId], references: [id])
  resourceId Int      @unique
}

model Topic {
  id      Int    @id @unique
  title   String @unique
  year    Int
  pages   Page[]
  authors User[]

  course   Course? @relation(fields: [courseId], references: [id])
  courseId Int?

  resource   Resource @relation(fields: [resourceId], references: [id])
  resourceId Int      @unique

  metadata   Metadata @relation(fields: [metadataId], references: [id])
  metadataId Int      @unique
}

model Page {
  id    Int
  title String?
  html  String
  text  String

  topic   Topic @relation(fields: [topicId], references: [id])
  topicId Int

  resource   Resource @relation(fields: [resourceId], references: [id])
  resourceId Int      @unique

  metadata   Metadata @relation(fields: [metadataId], references: [id])
  metadataId Int      @unique

  @@id([topicId, id])
}

model Resource {
  id        Int        @id @default(autoincrement())
  modals    Modal[]
  variables Variable[]

  course Course?
  topic  Topic?
  page   Page?
}

model Modal {
  id      Int     @id @default(autoincrement())
  heading String?
  html    String
  text    String

  resource   Resource? @relation(fields: [resourceId], references: [id])
  resourceId Int?
}

model Metadata {
  id          Int       @id @default(autoincrement())
  description String?
  keywords    Keyword[]
  goals       String?
  license     String?
  createdAt   DateTime  @default(now())
  modifiedAt  DateTime  @default(now())

  course Course?
  topic  Topic?
  page   Page?
}

model Keyword {
  value String @id

  metadata Metadata[]
}

model Variable {
  id         Int       @id @default(autoincrement())
  from       Int
  to         Int
  resource   Resource? @relation(fields: [resourceId], references: [id])
  resourceId Int?
}

// model User {
//   name String @id

//   topics Topic[]
// }
