Bind!:
Self:
1 + 2
Instructions:
3 + 1

New iteration:
[
    Product {
        numerator: [
            Element {
                sign: Positive,
                node_or_expression: Node(
                    Number(
                        Int(
                            3,
                        ),
                    ),
                ),
            },
        ],
        denominator: [],
    },
    Product {
        numerator: [
            Element {
                sign: Positive,
                node_or_expression: Node(
                    Number(
                        Int(
                            1,
                        ),
                    ),
                ),
            },
        ],
        denominator: [],
    },
]


Bind product (self, instr): 1 3
Zipped [self, instructions]:
[
    (
        Element {
            sign: Positive,
            node_or_expression: Node(
                Number(
                    Int(
                        1,
                    ),
                ),
            ),
        },
        Element {
            sign: Positive,
            node_or_expression: Node(
                Number(
                    Int(
                        3,
                    ),
                ),
            ),
        },
    ),
]


Bind!:
Self:
1
Instructions:
3

Zipped [self, instructions]:
[]


Bind product (self, instr): 2 1
Zipped [self, instructions]:
[
    (
        Element {
            sign: Positive,
            node_or_expression: Node(
                Number(
                    Int(
                        2,
                    ),
                ),
            ),
        },
        Element {
            sign: Positive,
            node_or_expression: Node(
                Number(
                    Int(
                        1,
                    ),
                ),
            ),
        },
    ),
]


Bind!:
Self:
2
Instructions:
1

Zipped [self, instructions]:
[]


New iteration:
[
    Product {
        numerator: [
            Element {
                sign: Positive,
                node_or_expression: Node(
                    Number(
                        Int(
                            1,
                        ),
                    ),
                ),
            },
        ],
        denominator: [],
    },
    Product {
        numerator: [
            Element {
                sign: Positive,
                node_or_expression: Node(
                    Number(
                        Int(
                            3,
                        ),
                    ),
                ),
            },
        ],
        denominator: [],
    },
]


Bind product (self, instr): 1 1
Zipped [self, instructions]:
[
    (
        Element {
            sign: Positive,
            node_or_expression: Node(
                Number(
                    Int(
                        1,
                    ),
                ),
            ),
        },
        Element {
            sign: Positive,
            node_or_expression: Node(
                Number(
                    Int(
                        1,
                    ),
                ),
            ),
        },
    ),
]


Bind!:
Self:
1
Instructions:
1

Zipped [self, instructions]:
[]


Bind product (self, instr): 2 3
Zipped [self, instructions]:
[
    (
        Element {
            sign: Positive,
            node_or_expression: Node(
                Number(
                    Int(
                        2,
                    ),
                ),
            ),
        },
        Element {
            sign: Positive,
            node_or_expression: Node(
                Number(
                    Int(
                        3,
                    ),
                ),
            ),
        },
    ),
]


Bind!:
Self:
2
Instructions:
3

Zipped [self, instructions]:
[]


